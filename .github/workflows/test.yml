name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  BASE_URL: http://localhost
  FIXTURE_SEED: 42
  E2E_TIMEOUT: 30

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
        test-phase: [phase1, phase2]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start Docker Compose services
        run: |
          docker-compose up -d --build
          echo "Waiting for services to be healthy..."

      - name: Wait for services
        run: |
          chmod +x scripts/health_check_new.sh
          ./scripts/health_check_new.sh --wait

      - name: Run ${{ matrix.test-phase }} tests
        run: |
          pytest tests/ -m ${{ matrix.test-phase }} -v --tb=short --maxfail=5

      - name: Generate test report
        if: always()
        run: |
          pytest tests/ -m ${{ matrix.test-phase }} --html=report-${{ matrix.test-phase }}.html --self-contained-html || true

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report-${{ matrix.test-phase }}-py${{ matrix.python-version }}
          path: report-${{ matrix.test-phase }}.html

      - name: View Docker logs on failure
        if: failure()
        run: |
          docker-compose logs --tail=100

      - name: Cleanup Docker services
        if: always()
        run: |
          docker-compose down -v

  ground-truth-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start Docker services
        run: |
          docker-compose up -d --build

      - name: Wait for services
        run: |
          chmod +x scripts/health_check_new.sh
          ./scripts/health_check_new.sh --wait

      - name: Validate fixtures
        run: |
          chmod +x scripts/validate_fixtures.py
          python scripts/validate_fixtures.py --all

      - name: Generate ground truth
        run: |
          chmod +x scripts/generate_ground_truth.py
          python scripts/generate_ground_truth.py --all --validate --include-sitemap --output ground-truth/

      - name: Upload ground truth artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ground-truth-data
          path: ground-truth/

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Start Docker services
        run: |
          docker-compose up -d --build

      - name: Wait for services
        run: |
          chmod +x scripts/health_check_new.sh
          ./scripts/health_check_new.sh --wait

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=tests --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  integration:
    runs-on: ubuntu-latest
    needs: [test, ground-truth-validation]
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start all services
        run: |
          docker-compose up -d --build

      - name: Wait for services
        run: |
          chmod +x scripts/health_check_new.sh
          ./scripts/health_check_new.sh --wait

      - name: Run full integration tests
        run: |
          pytest tests/ -v --tb=short -m "not slow" --maxfail=10

      - name: Run slow tests
        run: |
          pytest tests/ -v --tb=short -m slow || true

      - name: Generate summary report
        if: always()
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Python Version: 3.11" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Services: $(docker-compose ps --services | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Test Files: $(find tests/ -name 'test_*.py' | wc -l)" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v
